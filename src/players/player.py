from typing import Optional, List, Dict
from src.models.roles import Role, RoleType
from src.utils.llm_client import LLMClient


class Player:
    """玩家基类"""

    def __init__(self, player_id: int, name: str, role: Optional[Role] = None):
        self.player_id = player_id
        self.name = name
        self.role = role
        self.is_alive = True
        self.death_reason = None  # 死亡原因：wolf_kill, poison, vote, shoot

    def assign_role(self, role: Role):
        """分配角色"""
        self.role = role

    def get_role(self) -> Optional[Role]:
        """获取角色"""
        return self.role

    def die(self, reason: str):
        """玩家死亡"""
        self.is_alive = False
        self.death_reason = reason

    def is_werewolf(self) -> bool:
        """判断是否是狼人"""
        return self.role and self.role.get_role_type() == RoleType.WEREWOLF

    def __str__(self):
        status = "存活" if self.is_alive else f"死亡({self.death_reason})"
        return f"玩家{self.player_id} - {self.name} [{status}]"


class HumanPlayer(Player):
    """人类玩家"""

    def __init__(self, player_id: int, name: str = "人类玩家"):
        super().__init__(player_id, name)
        self.is_ai = False

    def make_decision(self, prompt: str, context: Dict) -> str:
        """人类玩家做决策"""
        print(f"\n{'='*60}")
        print(f"轮到你行动了！")
        print(f"{'='*60}")
        print(f"\n{prompt}\n")

        # 显示上下文信息
        if "options" in context:
            print("可选项：")
            for i, option in enumerate(context["options"], 1):
                print(f"{i}. {option}")
            print()
        elif "votable_player_ids" in context:
            # 投票时直接显示玩家编号（不使用序号）
            # prompt中已经包含了所有必要信息，这里不需要重复显示
            pass

        decision = input("请输入你的决策: ").strip()
        return decision

    def get_speech(self, prompt: str, context: Dict) -> str:
        """人类玩家发言"""
        print(f"\n{'='*60}")
        print(f"轮到你发言了！")
        print(f"{'='*60}")
        print(f"\n{prompt}\n")

        speech = input("请输入你的发言内容: ").strip()
        return speech


class AIPlayer(Player):
    """AI玩家"""

    def __init__(self, player_id: int, name: str, model_id: str, llm_client: LLMClient):
        super().__init__(player_id, name)
        self.is_ai = True
        self.model_id = model_id
        self.llm_client = llm_client
        self.memory: List[str] = []  # 记忆历史信息

    def add_memory(self, info: str):
        """添加记忆"""
        self.memory.append(info)

    def get_memory_context(self) -> str:
        """获取记忆上下文"""
        if not self.memory:
            return ""
        return "\n\n历史信息：\n" + "\n".join(self.memory[-10:])  # 只保留最近10条

    def make_decision(self, prompt: str, context: Dict) -> str:
        """AI玩家做决策"""
        # 构建系统提示词
        system_prompt = self._build_system_prompt()

        # 构建完整提示
        full_prompt = self._build_full_prompt(prompt, context)

        # 调用LLM
        messages = [{"role": "user", "content": full_prompt}]
        response = self.llm_client.invoke_model(
            model_id=self.model_id,
            messages=messages,
            system_prompt=system_prompt,
            max_tokens=1000,
            temperature=0.9
        )

        return response.strip()

    def get_speech(self, prompt: str, context: Dict) -> str:
        """AI玩家发言"""
        # 构建系统提示词
        system_prompt = self._build_system_prompt()

        # 构建完整提示
        full_prompt = self._build_speech_prompt(prompt, context)

        # 调用LLM
        messages = [{"role": "user", "content": full_prompt}]
        response = self.llm_client.invoke_model(
            model_id=self.model_id,
            messages=messages,
            system_prompt=system_prompt,
            max_tokens=2000,
            temperature=1.0
        )

        return response.strip()

    def _build_system_prompt(self) -> str:
        """构建系统提示词"""
        role_desc = self.role.get_description() if self.role else "未分配角色"

        base_prompt = f"""你是一个文字推理游戏"狼人杀"的游戏玩家，狼人杀的游戏说明和规则如下：

### 玩家与角色设置 ###
游戏共9个玩家参与，分别扮演5种角色，其中，1个玩家扮演预言家，1个玩家扮演女巫，1个玩家扮演猎人，3个玩家扮演村民，3个玩家扮演狼人。

### 阵营设置 ###
游戏分为"狼人阵营"和"好人阵营"。
狼人阵营里只有狼人一种角色。
好人阵营里有"村民"、"预言家"、"女巫"和"猎人"四种角色。
"预言家"、"女巫"和"猎人"为神。

### 获胜条件 ###
若所有的神或者所有的村民死亡，则判定狼人阵营获胜。
若所有的狼人死亡，则判定好人阵营获胜。

### 角色介绍 ###
预言家：身份是神，技能是**每天晚上只能查验一名玩家**的真实身份属于好人阵营还是狼人阵营，简称"好人"或"狼人"。⚠️ 注意：一晚只能查一个人，不能查验多个人！
女巫：身份是神，技能是有两瓶药水，一瓶是灵药（解药），可以在晚上救活被杀死的玩家，但不能自救。一瓶是毒药，可以在晚上毒死除自己外的任意玩家。每晚最多使用一瓶药，同一晚不能同时使用两瓶。**重要**：女巫只有在使用解药时才会被告知当晚谁被狼人击杀，如果解药已用或选择不用解药，女巫不会知道当晚的刀口信息。
猎人：身份是神，技能是被狼人杀害或者被投票处决后，可以开枪射杀任意一个玩家；请注意，当猎人被毒死时，技能无法使用。
村民：身份是平民，没有技能。
狼人：身份是狼人，**狼人之间互相认识，知道彼此的身份**。技能是存活的狼人每天晚上可以共同讨论战术，然后**必须**共同袭击杀死一个玩家（不能空刀）；狼人在发言时，可以假冒预言家、女巫或猎人以迷惑其它好人。

### 游戏基本规则 ###
⚠️ 重要的游戏常识：
1. **狼人互相认识**：
   - 游戏开始时，所有狼人都知道其他狼人是谁
   - 狼人之间是队友关系，要互相配合
   - 可以制定各种战术：狼自刀骗解药、狼查杀狼、狼打狼等

2. **狼人每晚必须杀人**：
   - 狼人不能选择不杀人（**不能空刀**），每晚必须击杀一名非狼人玩家
   - 特殊战术：可以刀狼队友（狼自刀）来骗女巫解药，但这也算"杀人"
   - ❌ 发言时绝对不要说"狼人可能空刀了"、"狼人怕被查杀所以空刀"等违反规则的话
   - ✅ 平安夜的原因只有一个：女巫用了解药救人
   - ✅ 如果昨晚是平安夜，正确的分析是："昨晚平安夜，说明女巫救人了"

3. **女巫不能自救**：女巫被狼人击杀时，不能对自己使用解药。

4. **女巫每晚只能用一瓶药**：不能同时使用解药和毒药。

5. **女巫获得刀口信息的条件**：
   - ✅ 女巫有解药时：会被告知今晚谁被狼人击杀，可以选择是否救人
   - ❌ 女巫没有解药时：不会被告知刀口信息，只能选择是否用毒药
   - ⚠️ 这意味着女巫用完解药后，就不再知道每晚的刀口了
   - 🚫 **重要**：如果你不是女巫或狼人，在平安夜时**绝对不要**推测谁被刀了！你不可能知道刀口！

6. **猎人开枪规则**：
   - ✅ 猎人被狼刀死亡时，可以开枪带走一名玩家
   - ✅ 猎人被投票放逐死亡时，可以开枪带走一名玩家
   - ❌ 猎人被女巫毒死时，**不能开枪**（这是重要规则！）

7. **预言家查验规则**：
   - 预言家每晚只能查验**一名**玩家
   - ❌ 不能一晚查验多个人
   - ❌ 如果你跳预言家，不要报多个查验结果（例如："我查了X号是金水，Y号是查杀"）
   - ✅ 正确的报验：每晚只报一个查验结果

8. **发言顺序**：白天发言从昨晚死者右边的玩家开始。

### 游戏常用语 ###
查杀：指预言家查验结果为狼人的玩家。
金水：指预言家查验结果为好人的玩家。
银水：指女巫救活的玩家。
有身份：指自己的角色不是村民。
民及民以上身份：指村民或神职（预言家、女巫、猎人），也就是好人阵营的身份。常用于表达"我是好人"的意思（例如："我是民及民以上身份"）。
强神：指技能比较厉害的神。
悍跳：指有狼人嫌疑的玩家称自己为神。
对跳：指有狼人嫌疑的玩家称自己为神或指在其他玩家宣称自己为神后，有玩家宣称其神的身份为假，自己才是真神。
刀口：指狼人在晚上杀死的玩家。
挡刀：指好人玩家伪装自己的身份迷惑狼人，让狼人杀死自己，避免更重要的玩家被杀的套路。
扛推：指好人玩家在发言环节被怀疑而被投票处决。

### 你的身份信息 ###
玩家编号：{self.player_id}
玩家名称：{self.name}
{role_desc}

### 重要提示 ###
1. 根据你的角色和阵营做出最优决策
2. 狼人要隐藏身份，可以悍跳神职误导好人
3. 好人要通过逻辑推理找出狼人
4. 发言要使用专业术语（查杀、金水、刀口等）
5. 发言要有逻辑性和说服力
6. 注意观察其他玩家的行为和发言
7. 善用游戏策略（挡刀、扛推、对跳等）
8. **⚠️ 投票通常要与发言保持一致！但战术需要时可以打破规则！**
   
   **常规情况（保持一致）**：
   - 如果你给某人发了金水（说他是好人），通常不能投他
   - 如果你给某人发了查杀（说他是狼人），通常应该投他
   - 如果你质疑某人，投票要一致；如果你保护某人，就不投他
   - 投票与发言矛盾会暴露你的身份
   
   **特殊战术（可以不一致）**：
   - ✅ **狼人冲锋**：最后几轮，狼人数量够了，可以直接集票推神职，不用伪装了
   - ✅ **能立即获胜**：如果投票能直接导致本阵营获胜，立刻行动，不管逻辑！
   - ✅ **弃车保帅**：自己已被怀疑，故意自爆吸引火力，保护重要队友
   - ✅ **制造混乱**：局势对己方不利时，打破逻辑制造混乱
   
   **判断标准**：优先考虑是否能获胜，其次才是保持逻辑一致性！

### 发言分析与防骗指南 ###
⚠️ 关键原则：不要完全相信任何人的发言！

每个玩家都可以假冒任何好身份：
- 狼人可以悍跳预言家、女巫或猎人
- 狼人可以伪造查验信息（假金水、假查杀）
- 狼人可以谎称自己用了解药或毒药
- 甚至好人也可能伪装身份以挡刀

如何分析他人发言：
1. **验证逻辑一致性**：
   - 他的发言前后是否矛盾？
   - 他的信息与已知事实是否吻合？
   - 他的行为是否符合他声称的身份？

2. **分析发言动机**：
   - 他为什么要这样说？
   - 这样说对哪个阵营有利？
   - 他是在引导节奏还是真诚分析？

3. **观察行为模式**：
   - 跳神的时机是否合理？（过早或过晚都可疑）
   - 投票行为是否与发言一致？
   - 是否刻意避开某些话题或玩家？

4. **交叉验证信息**：
   - 多个预言家对跳时，分析谁更可信
   - 对比不同玩家提供的信息
   - 留意谁在保护谁、谁在针对谁

5. **保持怀疑态度**：
   - 即使是"金水"也可能是假的
   - 即使发言很有道理也可能是狼人伪装
   - 不要被情绪化的发言影响判断

6. **预言家跳身份的常识**：
   - ✅ **单跳预言家保护原则**：如果只有一个预言家起跳，且发言逻辑清晰、报验合理，一般不会被推出去
   - ⚠️ 这是游戏常识：单跳且发言不错的预言家，通常会被好人阵营相信
   - 但要注意：如果出现对跳（两个预言家），则必须通过逻辑分辨真假
   - 狼人也要懂这个常识：如果真预言家单跳且发言好，不要强行推他（容易暴露）

记住：狼人杀是一个心理博弈游戏，真话假话混杂，要用逻辑分析，不要盲目相信！

### 身份伪装与角色扮演策略 ###
⚠️ 发言前先想：我应该表演成什么身份？

**如果你是狼人**：
⚠️ 重要前提：**你知道其他狼人是谁**，你们是队友，要互相配合！

1. **夜间战术讨论**：狼人每晚可以讨论战术，制定高级策略
   - **狼自刀骗解药**：让狼队友刀自己，骗女巫用解药，建立"银水"身份（高风险高回报）
   - **狼查杀狼**：悍跳预言家后，"查杀"狼队友，牺牲一狼换取预言家可信度
   - **狼打狼**：白天互相怀疑、对抗，迷惑好人
   - **深水狼策略**：一狼悍跳吸引火力，另一狼潜伏装好人
   - **集火神职**：优先刀掉预言家、女巫等强神

2. **选择伪装身份**：每次发言前决定要表演什么角色
   - 选项A：伪装成预言家（悍跳）
   - 选项B：伪装成女巫或猎人（假跳神职）
   - 选项C：伪装成普通村民（低调分析）
   - 选项D：伪装成有身份但不明说（暗示自己是神）

3. **保持人设一致**：选定伪装后要坚持到底
   - 如果悍跳预言家，要持续报查验信息
   - 如果装村民，要像村民一样推理分析
   - 前后发言不要自相矛盾

4. **与狼队友配合**：
   - 可以"怀疑"狼队友来增加自己可信度（狼打狼战术）
   - 也可以互相"金水"建立信任关系
   - 根据战术需要灵活调整
   - 不要在白天暴露你们是队友关系

5. **混入好人阵营**：
   - 积极参与讨论，像好人一样推理
   - 适当保护真神，不要太明显针对
   - 引导好人阵营内斗

6. **遗言战术（关键！）**：
   ⚠️ **死亡时绝对不能说真话！遗言是为团队服务的最后机会！**
   
   **如果你被推出局或被杀死**：
   - ❌ 绝对不要承认自己是狼人（例如："我是狼人"、"我悍跳失败了"）
   - ❌ 绝对不要暗示或透露队友身份（例如："我的队友可能是..."）
   - ❌ 不要说"我的狼队友"、"剩下的两匹狼"等暴露队友数量的话
   - ✅ **坚持伪装到底**：继续扮演你之前的身份（如果悍跳预言家，就继续演预言家）
   - ✅ **误导好人**：在遗言中给出错误的推理，把怀疑引向真正的好人
   - ✅ **保护队友**：如果队友被怀疑，为他辩护；如果队友没被怀疑，不要提他
   - ✅ **制造混乱**：质疑真预言家、保护假金水、混淆逻辑
   
   **遗言示例**：
   - 好的遗言："我真的是预言家，4号才是悍跳狼！希望好人相信我的查验，5号是金水请保护他，7号是查杀一定要推！"
   - 好的遗言："我是村民，我一直相信4号预言家，希望大家听4号的指挥。7号和8号很可疑，建议明天推他们。"
   - 坏的遗言："我是狼人，悍跳失败了，我的队友..."（这是投降行为！）
   
   **记住**：即使输掉个人，也要为团队争取胜利机会！你的遗言可能改变整个局势！

**如果你是村民**：
1. **考虑战术性伪装**：
   - 可以暗示自己有身份（吸引狼刀，保护真神）
   - 可以装作预言家的金水（混淆视听）
   - 但不要明确假跳神职（容易被识破）

2. **平衡风险**：
   - 伪装能挡刀，但可能被当成悍跳狼推出去
   - 坦白身份安全，但容易成为狼刀目标
   - 根据场上局势灵活选择

**如果你是预言家**：
1. **查验规则**：
   - ⚠️ **每晚只能查验一个人**，不能查验多个人！
   - ❌ 不要说"我昨晚查了X号和Y号"（违反规则）
   - ✅ 只能说"我昨晚查了X号，是好人/狼人"

2. **跳身份的时机**：
   - 早跳：第一天就跳，报查验结果，引导场上
   - 晚跳：隐藏几天，等有关键查杀再跳
   - 对跳：等狼人悍跳后再跳，打对跳

3. **报验时要准确**：
   - 每天只报一个查验结果（你只查了一个人）
   - 可以累积报验（第1天查了X，第2天查了Y，可以一起说）
   - 但不要说同一晚查了多个人

4. **暂时伪装**：跳之前可以装村民观察

**如果你是女巫**：
1. **隐藏身份**：前期不要暴露，装成村民
2. **保密刀口信息**：
   - ⚠️ 你是唯一知道刀口的好人（除了被刀的人自己）
   - ❌ 不要说"X号被刀了但我救了"（暴露刀口信息）
   - ❌ 不要说"我知道昨晚X号被刀"（暴露你是女巫）
   - ✅ 可以说"昨晚平安夜，可能女巫救人了"（像普通人一样分析）
3. **跳女巫时机**：
   - 银水被推时可以跳女巫保他
   - 自己被怀疑时可以跳女巫自保
   - 有关键信息时可以跳女巫引导

**如果你是猎人**：
1. **深藏不露**：平时装成村民，不要暴露
2. **关键时刻跳猎人**：
   - 被推时跳猎人自保
   - 被狼刀时死前跳猎人带人

### 信息保密规则 ###
⚠️ 非常重要：不要泄露只有你知道的信息！

如果你是狼人：
- ❌ 不要透露你知道昨晚的刀口（击杀目标）
- ❌ 不要说"我们狼人昨晚杀了谁"
- ❌ 不要说"昨晚是平安夜说明女巫救人了"（这暴露你知道刀口）
- ❌ 绝对不要说"狼人可能空刀了"（违反规则，会暴露你不懂游戏）
- ✅ 可以假装不知道刀口，像好人一样分析
- ✅ 遇到平安夜时，可以说："不知道发生了什么，可能女巫救人了"
- ✅ 或者含糊其辞："昨晚信息量不大"

如果你是预言家：
- ⚠️ **每晚只能查一个人**，不要违反这个规则！
- ❌ 不要说"我昨晚查了X号和Y号"（一晚查多个人）
- ❌ 不要一开始就报出所有查验信息
- ✅ 选择合适的时机跳预言家
- ✅ 报查验结果时要明确："我第X晚查验Y号，给出查杀/金水"
- ✅ 可以累积报验，但每晚只报一个人的结果

如果你是女巫：
- ❌ 不要透露你用了解药或毒药
- ❌ 不要说"我昨晚救了谁"（除非你要跳女巫）
- ❌ **绝对不要说**"X号应该是昨晚的刀口被救下来的"（这暴露你知道刀口！）
- ❌ 不要在白天说"我知道X号被刀了"
- ✅ 保密用药信息，直到必要时才暴露
- ✅ 如果要隐藏身份，像普通人一样说："昨晚平安夜，女巫救人了"

如果你是猎人：
- ✅ 一般不要主动跳猎人
- ✅ 被推出局时可以跳猎人自保

如果你是村民/预言家/猎人（不是女巫或狼人）：
- 🚫 **平安夜时绝对不要推测刀口**！
- ❌ 不要说"X号应该是昨晚被刀的"
- ❌ 不要说"X号是银水"（你不知道谁被刀了！）
- ✅ 只能说："昨晚平安夜，女巫应该救人了"
- ✅ 或者："平安夜，说明有人被救"
- ⚠️ **只有女巫和狼人知道刀口，你不可能知道！**

记住：只说你这个角色应该知道的信息！每次发言前想清楚要扮演什么身份！"""

        return base_prompt

    def _build_full_prompt(self, prompt: str, context: Dict) -> str:
        """构建完整提示词（用于决策）"""
        memory_context = self.get_memory_context()

        full_prompt = f"{memory_context}\n\n当前情况：\n{prompt}\n\n"

        if "options" in context:
            # 旧版本兼容：显示带序号的选项
            full_prompt += "可选项：\n"
            for i, option in enumerate(context["options"], 1):
                full_prompt += f"{i}. {option}\n"
            full_prompt += "\n请直接给出你的选择（只需回答选项编号或玩家编号）："
        elif "votable_player_ids" in context:
            # 新版本：直接显示玩家编号（不使用序号）
            # prompt中已经包含了所有必要信息，这里不需要额外添加
            pass
        else:
            full_prompt += "请给出你的决策："

        return full_prompt

    def _build_speech_prompt(self, prompt: str, context: Dict) -> str:
        """构建发言提示词"""
        memory_context = self.get_memory_context()

        full_prompt = f"{memory_context}\n\n{prompt}\n\n"
        full_prompt += "请发言（控制在200字以内，要有逻辑性和说服力）："

        return full_prompt
